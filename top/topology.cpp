// Topology assembly for the S‑Band demo
//
// This file is a placeholder demonstrating how one might assemble the
// component instances defined in Top.fpp.  The actual topology
// functions will be auto‑generated by the F´ autocoder based on
// Top.fpp and the component definitions.  The functions below show
// where to instantiate and initialise your component implementations.

#include "SBandDemo/Topology.hpp"
#include "RadioDriverComponentImpl.hpp"
#include "CanHandlerComponentImpl.hpp"
#include "HousekeepingComponentImpl.hpp"

namespace SBandDemo {

  // Global component objects.  In a real topology the autocoder will
  // generate declarations for these based on your FPP model.
  static RadioDriverComponentImpl radio("RADIO");
  static CanHandlerComponentImpl can("CAN");
  static HousekeepingComponentImpl hk("HK");

  void topo_init() {
    // Initialise components with reasonable queue depths
    radio.init(10, 0);
    can.init(10, 0);
    hk.init(10, 0);

    // TODO: connect ports here or rely on the autocoded assembly.
    // For example: can.radioOutOutConnect(0, radio, 0);
  }

  void topo_start() {
    // Start any active components if required.  For Active components the
    // F´ framework will create threads automatically when their
    // `start()` method is invoked.  The `start()` methods are part of
    // the autocoded base classes.
    radio.start();
    can.start();
    hk.start();
  }

} // namespace SBandDemo